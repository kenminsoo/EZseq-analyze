names(data_frame) <- sheets
#make adjust
adj3 <- FBS_minus(6, 3)
adj4 <- FBS_minus(6, 4)
adj5 <- FBS_minus(7, 5)
adj6 <- FBS_minus(7, 6)
return_list <- list()
#create comparison table
return_list[['comp_25']] <- merge(adj3, data_frame[[7]], by = 'Geneid')
return_list[['comp_26']] <- merge(adj4, data_frame[[8]], by = 'Geneid')
return_list[['comp_27']] <- merge(adj5, data_frame[[9]], by = 'Geneid')
return_list[['comp_28']] <- merge(adj6, data_frame[[10]], by = 'Geneid')
#filter comparison table
n = 1
for (dataset in return_list){
abs_range_store <- abs(dataset$mean.x - dataset$mean)
print(return_list[[n]])
print(dataset)
return_list[[n]] <- cbind(return_list[[n]], abs_range_store)
n = n + 1
rm(abs_range_store)
}
write.xlsx(return_list, output_file)
}
extract_comparison_tables('tpm_all_sd.xlsx', 'all_comp.xlsx')
sheets <- openxlsx::getSheetNames('tpm_all_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_all_sd.xlsx')
names(data_frame) <- sheets
View(data_frame)
FBS_minus <- function(adj_num, dataset){  #10 = 6  #12 = 7
print(data_frame)
return_df <- merge(data_frame[[dataset]], data_frame[[1]], by = 'Geneid')
return_df[4] <- return_df[4] - return_df[adj_num]
return_df[3] <- return_df[3] - return_df[adj_num]
return_df <- return_df %>%
filter_all(all_vars(. > 0))
return_df$mean.x <- rowMeans(return_df[2:3])
return(return_df[1:5])
}
#this is terrible but i would like to finish
extract_comparison_tables <- function(output_file){
#make adjust
adj3 <- FBS_minus(6, 3)
adj4 <- FBS_minus(6, 4)
adj5 <- FBS_minus(7, 5)
adj6 <- FBS_minus(7, 6)
return_list <- list()
#create comparison table
return_list[['comp_25']] <- merge(adj3, data_frame[[7]], by = 'Geneid')
return_list[['comp_26']] <- merge(adj4, data_frame[[8]], by = 'Geneid')
return_list[['comp_27']] <- merge(adj5, data_frame[[9]], by = 'Geneid')
return_list[['comp_28']] <- merge(adj6, data_frame[[10]], by = 'Geneid')
#filter comparison table
n = 1
for (dataset in return_list){
abs_range_store <- abs(dataset$mean.x - dataset$mean)
print(return_list[[n]])
print(dataset)
return_list[[n]] <- cbind(return_list[[n]], abs_range_store)
n = n + 1
rm(abs_range_store)
}
write.xlsx(return_list, output_file)
}
extract_comparison_tables('comp_all.xlsx')
sheets <- openxlsx::getSheetNames('tpm_mirna_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_mirna_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_mirna.xlsx')
sheets <- openxlsx::getSheetNames('tpm_pirna_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_pirna_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_pirna.xlsx')
sheets <- openxlsx::getSheetNames('tpm_smrna_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_smrna_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_smrna.xlsx')
FBS_minus <- function(adj_num, dataset){  #10 = 6  #12 = 7
print(data_frame)
return_df <- merge(data_frame[[dataset]], data_frame[[1]], by = 'Geneid')
return_df[4] <- return_df[4] - return_df[adj_num]
return_df[3] <- return_df[3] - return_df[adj_num]
return_df <- return_df %>%
filter_all(all_vars(. > 0))
return_df$mean.x <- rowMeans(return_df[2:3])
return(return_df[1:5])
}
#this is terrible but i would like to finish
extract_comparison_tables <- function(output_file){
#make adjust
adj3 <- FBS_minus(6, 3)
adj4 <- FBS_minus(6, 4)
adj5 <- FBS_minus(7, 5)
adj6 <- FBS_minus(7, 6)
return_list <- list()
#create comparison table
return_list[['comp_25']] <- merge(adj3, data_frame[[7]], by = 'Geneid')
return_list[['comp_26']] <- merge(adj4, data_frame[[8]], by = 'Geneid')
return_list[['comp_27']] <- merge(adj5, data_frame[[9]], by = 'Geneid')
return_list[['comp_28']] <- merge(adj6, data_frame[[10]], by = 'Geneid')
#filter comparison table
n = 1
for (dataset in return_list){
range_store <- dataset$mean.x - dataset$mean
print(return_list[[n]])
print(dataset)
return_list[[n]] <- cbind(return_list[[n]], range = range_store)
return_list[[n]] <- return_list[[n]]%>%
filter_all(range(. > 5))
n = n + 1
}
write.xlsx(return_list, output_file)
}
sheets <- openxlsx::getSheetNames('tpm_all_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_all_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_all.xlsx')
#####
FBS_minus <- function(adj_num, dataset){  #10 = 6  #12 = 7
print(data_frame)
return_df <- merge(data_frame[[dataset]], data_frame[[1]], by = 'Geneid')
return_df[4] <- return_df[4] - return_df[adj_num]
return_df[3] <- return_df[3] - return_df[adj_num]
return_df <- return_df %>%
filter_all(all_vars(. > 0))
return_df$mean.x <- rowMeans(return_df[2:3])
return(return_df[1:5])
}
#this is terrible but i would like to finish
extract_comparison_tables <- function(output_file){
#make adjust
adj3 <- FBS_minus(6, 3)
adj4 <- FBS_minus(6, 4)
adj5 <- FBS_minus(7, 5)
adj6 <- FBS_minus(7, 6)
return_list <- list()
#create comparison table
return_list[['comp_25']] <- merge(adj3, data_frame[[7]], by = 'Geneid')
return_list[['comp_26']] <- merge(adj4, data_frame[[8]], by = 'Geneid')
return_list[['comp_27']] <- merge(adj5, data_frame[[9]], by = 'Geneid')
return_list[['comp_28']] <- merge(adj6, data_frame[[10]], by = 'Geneid')
#filter comparison table
n = 1
for (dataset in return_list){
range_store <- dataset$mean.x - dataset$mean
print(return_list[[n]])
print(dataset)
return_list[[n]] <- cbind(return_list[[n]], range = range_store)
return_list[[n]] <- return_list[[n]]%>%
filter(range(. > 5))
n = n + 1
}
write.xlsx(return_list, output_file)
}
sheets <- openxlsx::getSheetNames('tpm_all_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_all_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_all.xlsx')
#####
extract_comparison_tables <- function(output_file){
#make adjust
adj3 <- FBS_minus(6, 3)
adj4 <- FBS_minus(6, 4)
adj5 <- FBS_minus(7, 5)
adj6 <- FBS_minus(7, 6)
return_list <- list()
#create comparison table
return_list[['comp_25']] <- merge(adj3, data_frame[[7]], by = 'Geneid')
return_list[['comp_26']] <- merge(adj4, data_frame[[8]], by = 'Geneid')
return_list[['comp_27']] <- merge(adj5, data_frame[[9]], by = 'Geneid')
return_list[['comp_28']] <- merge(adj6, data_frame[[10]], by = 'Geneid')
#filter comparison table
n = 1
for (dataset in return_list){
range_store <- dataset$mean.x - dataset$mean
print(return_list[[n]])
print(dataset)
return_list[[n]] <- cbind(return_list[[n]], range = range_store)
return_list[[n]] <- return_list[[n]]%>%
filter(range(range > 5))
n = n + 1
}
write.xlsx(return_list, output_file)
}
sheets <- openxlsx::getSheetNames('tpm_all_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_all_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_all.xlsx')
#####
extract_comparison_tables <- function(output_file){
#make adjust
adj3 <- FBS_minus(6, 3)
adj4 <- FBS_minus(6, 4)
adj5 <- FBS_minus(7, 5)
adj6 <- FBS_minus(7, 6)
return_list <- list()
#create comparison table
return_list[['comp_25']] <- merge(adj3, data_frame[[7]], by = 'Geneid')
return_list[['comp_26']] <- merge(adj4, data_frame[[8]], by = 'Geneid')
return_list[['comp_27']] <- merge(adj5, data_frame[[9]], by = 'Geneid')
return_list[['comp_28']] <- merge(adj6, data_frame[[10]], by = 'Geneid')
#filter comparison table
n = 1
for (dataset in return_list){
range_store <- dataset$mean.x - dataset$mean
print(return_list[[n]])
print(dataset)
return_list[[n]] <- cbind(return_list[[n]], range = range_store)
return_list[[n]] <- return_list[[n]]%>%
filter(range > 5)
n = n + 1
}
write.xlsx(return_list, output_file)
}
sheets <- openxlsx::getSheetNames('tpm_all_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_all_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_all.xlsx')
#####
sheets <- openxlsx::getSheetNames('tpm_mirna_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_mirna_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_mirna.xlsx')
####
sheets <- openxlsx::getSheetNames('tpm_pirna_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_pirna_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_pirna.xlsx')
####
sheets <- openxlsx::getSheetNames('tpm_smrna_sd.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='tpm_smrna_sd.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
extract_comparison_tables('comp_smrna.xlsx')
library('openxlsx')
library('readxl')
library('ggplot2')
sheets <- openxlsx::getSheetNames('comp_all.xlsx')
data_frame <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='comp_all.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
View(data_frame)
install.packages('gprofiler2')
library('gprofiler2')
data_frame[[1]][1]
test <- gost(query = data_frame[[1]][1], organism = 'hsapiens')
test <- gost(query = c(data_frame[[1]][1]), organism = 'hsapiens')
View(test)
test
p <- gostplot(test, capped = FALSE, interactive = TRUE)
p
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens')
p <- gostplot(test, capped = FALSE, interactive = TRUE)
p
View(test)
write.xlsx(test, 'test')
View(test)
View(data_frame)
write.xlsx(test[1], 'test')
write.xlsx(test[1], 'test.xlsx')
sheets <- openxlsx::getSheetNames('comp_mirna.xlsx')
data_frame2 <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='comp_mirna.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
##lets annotate now
test2 <- gost(query = c(data_frame2[[2]][1]), organism = 'hsapiens')
p2 <- gostplot(test, capped = FALSE, interactive = TRUE)
p2
write.xlsx(test2[1], 'test.xlsx')
p2 <- gostplot(test2, capped = FALSE, interactive = TRUE)
p2
View(data_frame2)
sheets <- openxlsx::getSheetNames('comp_pirna.xlsx')
data_frame2 <- lapply(sheets, openxlsx::read.xlsx, xlsxFile='comp_pirna.xlsx')
# assigning names to data frame
names(data_frame) <- sheets
test2 <- gost(query = c(data_frame2[[2]][1]), organism = 'hsapiens')
p2 <- gostplot(test2, capped = FALSE, interactive = TRUE)
View(p2)
data_frame2[[2]][1])
data_frame2[[2]][1]
View(test)
library('openxlsx')
library('readxl')
library('ggplot2')
BiocManager::install('topGO')
library('topGO')
testGOdata <- new('topGOdata',
ontology = "BP", allGenes = c(data_frame[[4]][1]),
nodeSize = 10, annot = annFUN.org)
View(data_frame)
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
as_short_link = TRUE)
tet
test
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE)
write.xlsx(test[1], 'test.xlsx')
)
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens'),
significant = FALSE)
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE)
write.xlsx(test[1], 'test.xlsx')
library(readr)
tpm_all <- read_delim('tpm_all.tsv', delim = '\t')
tpm_all <- read_delim('hsa_all.tsv', delim = '\t')
View(tpm_all)
tpm_all <- read_delim('hsa_all.tsv', delim = '\t', skip = 1)
View(tpm_all)
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
custom_bg = c(tpm_all[1]))
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = c(tpm_all[1]))
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = custom_annotated,
custom_bg = c(tpm_all[1]))
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = c(tpm_all[1]))
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = tpm_all[1])
tpm_all[1]
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = c(data_frame[[2]][1]))
df_row <- data.frame()
df_row <- data.frame(nrow =1 )
View(df_row)
df_row <- rbind(tpm_all[1])
View(df_row)
df_row <- data.frame(nrow =1 )
df_row <- data.frame()
df_row <- rbind(c(tpm_all[1]))
View(df_row)
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = df_row)
print(c(tpm_all[1]))
print(as.vector(c(tpm_all[1])))
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = as.vector(tpm_all[1]))
class(as.vector(tpm_all[1]))
class(as.vector(c(tpm_all[1])))
genes <- tpm_all[1]
View(genes)
as.vector(genes)
array(genes)
as.vector(genes)
class(as.vector(genes))
dplyr::pull(genes, geneid)
View(genes)
dplyr::pull(genes, Geneid)
class(dplyr::pull(genes, Geneid))
class(as.vector(unlist(genes['Geneid'])))
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(test[1], 'test.xlsx')
filt_smrna <- tpm_smrna[rowMeans(tpm_smrna[2:24]) > (mean(unlist(tpm_smrna[2:24])) - 5), ] #17.56 - 5 #may have to expand to include more
tpm_all <- read_delim('tpm_all.tsv', delim = "\t", escape_double = FALSE, trim_ws = TRUE)
filt_all <- tpm_all[rowMeans(tpm_all[2:24]) > (mean(unlist(tpm_all[2:24])) - 5), ] #17.492 - 5
write.table(filt_all[13],sep = '\t', "filt_all.tsv")
View(filt_all)
write.table(filt_all[1],sep = '\t', "set_genes.tsv")
genes <- read_delim('set_genes.tsv', delim = '\t')
problems()
write.table(filt_all[1],sep = '\t', "set_genes.tsv",quote=F,row.names=F)
genes <- read_delim('set_genes.tsv', delim = '\t')
View(genes)
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(test[1], 'test.xlsx')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
BiocManager::install("biomaRt")
library('biomaRt')
go_terms <- getBM(
mart=ensembl, attributes=c("hgnc_symbol", "uniprot_gn_id", "uniprot_gn_symbol", "go_id", "namespace_1003", "name_1006"),
filters="hgnc_symbol", values=c(data_frame[[2]][1]))
ensembl <- useEnsembl(biomart="genes",dataset='hsapiens_gene_emsembl')
ensembl <- useEnsembl(biomart="genes",dataset='hsapiens_gene_ensembl')
go_terms <- getBM(
mart=ensembl, attributes=c("hgnc_symbol", "uniprot_gn_id", "uniprot_gn_symbol", "go_id", "namespace_1003", "name_1006"),
filters="hgnc_symbol", values=c(data_frame[[2]][1]))
View(go_terms)
##lets annotate now
test <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(test[1], 'test.xlsx')
View(go_terms)
go_terms <- getBM(
mart=ensembl, attributes=c("hgnc_symbol", "uniprot_gn_id", "uniprot_gn_symbol", "go_id", "namespace_1003", "name_1006"),
filters="hgnc_symbol", values=c(dplyr::pull(genes, Geneid))
go_terms <- getBM(mart=ensembl, attributes=c("hgnc_symbol", "uniprot_gn_id", "uniprot_gn_symbol", "go_id", "namespace_1003", "name_1006"),
filters="hgnc_symbol", values=c(dplyr::pull(genes, Geneid)))
View(go_terms)
View(data_frame2)
View(data_frame)
data_frame[["comp_26"]][["Geneid"]]
View(go_terms)
gost_data1 <- gost(query = c(data_frame[[1]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data1[1], 'ontology_25.xlsx')
gost_data2 <- gost(query = c(data_frame[[1]][2]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data2[1], 'ontology_26.xlsx')
gost_data3 <- gost(query = c(data_frame[[1]][3]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data3[1], 'ontology_27.xlsx')
gost_data4 <- gost(query = c(data_frame[[1]][4]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data4[1], 'ontology_28.xlsx')
gost_data2 <- gost(query = c(data_frame[[1]][2]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
View(data_frame)
gost_data2 <- gost(query = c(data_frame[[1]][2]), organism = 'hsapiens', significant = FALSE, domain_scope = 'custom_annotated',custom_bg = dplyr::pull(genes, Geneid))
gost_data2 <- gost(query = c(data_frame[[2]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data2[1], 'ontology_26.xlsx')
gost_data3 <- gost(query = c(data_frame[[3]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data3[1], 'ontology_27.xlsx')
gost_data4 <- gost(query = c(data_frame[[4]][1]), organism = 'hsapiens',
significant = FALSE,
domain_scope = 'custom_annotated',
custom_bg = dplyr::pull(genes, Geneid))
write.xlsx(gost_data4[1], 'ontology_28.xlsx')
gostplot(gost_data4, interactive = FALSE)
library('plotly')
plot4 <- gostplot(gost_data4, interactive = TRUE)
plot4
plot3 <- gostplot(gost_data3, interactive = TRUE)
plot3
plot3 <- plot3 %>% add_markers()
plot3
plot3 <- plot3 %>% add_text(textposition = 'top right', 'Hello')
plot3
View(plot3)
plot3 <- gostplot(gost_data3, interactive = TRUE)
plot3 <- plot3 %>% layout(title = 'Ontology 27')
plot3
plot4 <- gostplot(gost_data4, interactive = TRUE)
plot4 <- plot4 %>% layout(title = 'Ontology 28')
plot4
plot2 <- gostplot(gost_data2, interactive = TRUE)
plot2 <- plot2 %>% layout(title = 'Ontology 26')
plot2
plot1 <- gostplot(gost_data1, interactive = TRUE)
plot1 <- plot1 %>% layout(title = 'Ontology 25')
plot1
View(go_terms)
View(data_frame)
go_terms[1]
colnames(go_terms[1])
View(data_frame)
colnames(go_terms[1]) <- 'Geneid'
View(go_terms)
go_terms$Geneid <- go_terms$hgnc_symbol
rm(go_terms[1])
go_terms <- go_terms[-1]
join25 <- merge(data_frame[[1]], go_terms, by='Geneid')
View(join25)
join26 <- merge(data_frame[[2]], go_terms, by='Geneid')
join27 <- merge(data_frame[[3]], go_terms, by='Geneid')
join28 <- merge(data_frame[[4]], go_terms, by='Geneid')
View(join26)
write.xlsx(join25, 'goterm_25.xlsx')
write.xlsx(join26, 'goterm_26.xlsx')
write.xlsx(join27, 'goterm_27.xlsx')
write.xlsx(join28, 'goterm_28.xlsx')
View(gost_data2)
